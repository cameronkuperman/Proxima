'use client';

import { useState, useEffect } from 'react';
import { reportService } from '@/services/reportService';
import { ReportAnalysisRequest, SpecialtyType } from '@/types/reports';
import { useAuth } from '@/contexts/AuthContext';
import { SpecialtyTriage } from './reports/SpecialtyTriage';
import { Activity, FileText, Calendar, ChevronUp, ChevronDown, CheckCircle, Zap, Brain, MessageSquare } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { TimelineClient, FlashAssessment, GeneralAssessment, TimelineEvent } from '@/lib/timeline-client';
import { AssessmentSelector } from './AssessmentSelector';

interface ReportGeneratorProps {
  userId?: string;
  quickScanIds?: string[];
  deepDiveIds?: string[];
  photoSessionIds?: string[];
  onComplete?: (report: any) => void;
}

export function ReportGenerator({ 
  userId: propUserId, 
  quickScanIds = [], 
  deepDiveIds = [], 
  photoSessionIds = [],
  onComplete 
}: ReportGeneratorProps) {
  const { user } = useAuth();
  const userId = propUserId || user?.id;
  
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState<'select' | 'triage' | 'analyzing' | 'generating' | 'complete'>('select');
  const [error, setError] = useState<string | null>(null);
  const [analysisResult, setAnalysisResult] = useState<any>(null);
  const [generatedReport, setGeneratedReport] = useState<any>(null);
  const [triageResult, setTriageResult] = useState<any>(null);

  // Configuration
  const [reportType, setReportType] = useState<'symptom' | 'time' | 'specialist'>('symptom');
  const [symptomFocus, setSymptomFocus] = useState('');
  const [selectedSpecialty, setSelectedSpecialty] = useState<SpecialtyType>('cardiology');
  
  // Selection state
  const [availableQuickScans, setAvailableQuickScans] = useState<any[]>([]);
  const [availableDeepDives, setAvailableDeepDives] = useState<any[]>([]);
  const [availableFlashAssessments, setAvailableFlashAssessments] = useState<FlashAssessment[]>([]);
  const [availableGeneralAssessments, setAvailableGeneralAssessments] = useState<GeneralAssessment[]>([]);
  const [availableGeneralDeepDives, setAvailableGeneralDeepDives] = useState<any[]>([]);
  
  const [selectedQuickScans, setSelectedQuickScans] = useState<string[]>([]);
  const [selectedDeepDives, setSelectedDeepDives] = useState<string[]>([]);
  const [selectedFlashAssessments, setSelectedFlashAssessments] = useState<string[]>([]);
  const [selectedGeneralAssessments, setSelectedGeneralAssessments] = useState<string[]>([]);
  const [selectedGeneralDeepDives, setSelectedGeneralDeepDives] = useState<string[]>([]);
  
  const [expandedSections, setExpandedSections] = useState({ 
    quickScans: true, 
    deepDives: true,
    flashAssessments: true,
    generalAssessments: true,
    generalDeepDives: true
  });
  const [loadingData, setLoadingData] = useState(false);
  
  // Fetch available data
  useEffect(() => {
    if (userId && (reportType === 'specialist' || reportType === 'symptom')) {
      fetchAvailableData();
    }
  }, [userId, reportType]);
  
  const fetchAvailableData = async () => {
    setLoadingData(true);
    try {
      // Fetch quick scans
      const quickScansRes = await fetch(`${process.env.NEXT_PUBLIC_ORACLE_API_URL}/api/quick-scans?user_id=${userId}`);
      if (quickScansRes.ok) {
        const scans = await quickScansRes.json();
        setAvailableQuickScans(scans.filter((scan: any) => scan.status === 'completed'));
      }
      
      // Fetch deep dives
      const deepDivesRes = await fetch(`${process.env.NEXT_PUBLIC_ORACLE_API_URL}/api/deep-dives?user_id=${userId}`);
      if (deepDivesRes.ok) {
        const dives = await deepDivesRes.json();
        setAvailableDeepDives(dives.filter((dive: any) => dive.analysis_complete));
      }
      
      // Fetch timeline events to get general assessments
      const timelineClient = new TimelineClient();
      const events = await timelineClient.fetchTimelineEvents(userId!);
      
      // Extract flash assessments
      const flashEvents = events.filter(e => e.event_type === 'flash');
      const flashAssessments = await Promise.all(
        flashEvents.map(e => timelineClient.fetchFlashAssessment(e.source_id))
      );
      setAvailableFlashAssessments(flashAssessments.filter(a => a !== null) as FlashAssessment[]);
      
      // Extract general quick assessments
      const generalQuickEvents = events.filter(e => e.event_type === 'general_quick');
      const generalAssessments = await Promise.all(
        generalQuickEvents.map(e => timelineClient.fetchGeneralAssessment(e.source_id))
      );
      setAvailableGeneralAssessments(generalAssessments.filter(a => a !== null) as GeneralAssessment[]);
      
      // Extract general deep dive assessments
      const generalDeepEvents = events.filter(e => e.event_type === 'general_deep');
      const generalDeepDives = await Promise.all(
        generalDeepEvents.map(e => timelineClient.fetchGeneralDeepDive(e.source_id))
      );
      setAvailableGeneralDeepDives(generalDeepDives.filter(a => a !== null));
      
    } catch (err) {
      console.error('Error fetching available data:', err);
    } finally {
      setLoadingData(false);
    }
  };
  
  const toggleScan = (scanId: string, type: 'quick' | 'deep' | 'flash' | 'general' | 'generalDeep') => {
    switch (type) {
      case 'quick':
        setSelectedQuickScans(prev => 
          prev.includes(scanId) 
            ? prev.filter(id => id !== scanId)
            : [...prev, scanId]
        );
        break;
      case 'deep':
        setSelectedDeepDives(prev => 
          prev.includes(scanId) 
            ? prev.filter(id => id !== scanId)
            : [...prev, scanId]
        );
        break;
      case 'flash':
        setSelectedFlashAssessments(prev => 
          prev.includes(scanId) 
            ? prev.filter(id => id !== scanId)
            : [...prev, scanId]
        );
        break;
      case 'general':
        setSelectedGeneralAssessments(prev => 
          prev.includes(scanId) 
            ? prev.filter(id => id !== scanId)
            : [...prev, scanId]
        );
        break;
      case 'generalDeep':
        setSelectedGeneralDeepDives(prev => 
          prev.includes(scanId) 
            ? prev.filter(id => id !== scanId)
            : [...prev, scanId]
        );
        break;
    }
  };
  
  const toggleSection = (section: 'quickScans' | 'deepDives' | 'flashAssessments' | 'generalAssessments' | 'generalDeepDives') => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handleGenerateSymptomReport = async () => {
    setLoading(true);
    setError(null);
    setStep('analyzing');

    try {
      // Step 1: Analyze
      const analysis = await reportService.analyzeReport({
        user_id: userId,
        context: {
          purpose: 'symptom_specific',
          symptom_focus: symptomFocus,
        },
        available_data: {
          quick_scan_ids: quickScanIds,
          deep_dive_ids: deepDiveIds,
          photo_session_ids: photoSessionIds,
        }
      });

      setAnalysisResult(analysis);
      setStep('generating');

      // Step 2: Generate based on AI recommendation
      const report = await reportService.generateReport(
        analysis.analysis_id,
        analysis.recommended_type as any,
        userId,
        {
          quick_scan_ids: selectedQuickScans.length > 0 ? selectedQuickScans : undefined,
          deep_dive_ids: selectedDeepDives.length > 0 ? selectedDeepDives : undefined,
          flash_assessment_ids: selectedFlashAssessments.length > 0 ? selectedFlashAssessments : undefined,
          general_assessment_ids: selectedGeneralAssessments.length > 0 ? selectedGeneralAssessments : undefined,
          general_deepdive_ids: selectedGeneralDeepDives.length > 0 ? selectedGeneralDeepDives : undefined,
          photo_session_ids: photoSessionIds.length > 0 ? photoSessionIds : undefined
        },
        {
          symptom_focus: symptomFocus
        }
      );

      setGeneratedReport(report);
      setStep('complete');
      onComplete?.(report);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate report');
      setStep('select');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateTimeReport = async (period: '30-day' | 'annual') => {
    setLoading(true);
    setError(null);
    setStep('generating');

    try {
      const report = period === '30-day' 
        ? await reportService.generate30DayReport(userId!)
        : await reportService.generateAnnualReport(userId!);

      setGeneratedReport(report);
      setStep('complete');
      onComplete?.(report);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate report');
      setStep('select');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateSpecialistReport = async (specialtyOverride?: SpecialtyType) => {
    const specialtyToUse = specialtyOverride || selectedSpecialty;
    
    console.log('=== SPECIALIST REPORT GENERATION DEBUG ===');
    console.log('Specialty Override:', specialtyOverride);
    console.log('Selected Specialty State:', selectedSpecialty);
    console.log('Specialty to Use:', specialtyToUse);
    console.log('Selected Quick Scans:', selectedQuickScans);
    console.log('Selected Deep Dives:', selectedDeepDives);
    console.log('User ID:', userId);
    
    setLoading(true);
    setError(null);
    setStep('analyzing');

    try {
      // First analyze to get analysis_id
      const analysis = await reportService.analyzeReport({
        user_id: userId,
        context: {
          purpose: 'specialist_referral',
          target_audience: 'specialist',
          specialty: specialtyToUse, // Add specialty to context
        },
        available_data: {
          quick_scan_ids: selectedQuickScans.length > 0 ? selectedQuickScans : quickScanIds,
          deep_dive_ids: selectedDeepDives.length > 0 ? selectedDeepDives : deepDiveIds,
          photo_session_ids: photoSessionIds,
        }
      });

      console.log('Analysis Result:', analysis);
      setStep('generating');

      // Generate specialist report with selected IDs
      console.log('Generating report for specialty:', specialtyToUse);
      const report = await reportService.generateSpecialistReport(
        specialtyToUse,
        analysis.analysis_id,
        userId,
        {
          quick_scan_ids: selectedQuickScans.length > 0 ? selectedQuickScans : undefined,
          deep_dive_ids: selectedDeepDives.length > 0 ? selectedDeepDives : undefined,
          flash_assessment_ids: selectedFlashAssessments.length > 0 ? selectedFlashAssessments : undefined,
          general_assessment_ids: selectedGeneralAssessments.length > 0 ? selectedGeneralAssessments : undefined,
          general_deepdive_ids: selectedGeneralDeepDives.length > 0 ? selectedGeneralDeepDives : undefined,
          photo_session_ids: photoSessionIds.length > 0 ? photoSessionIds : undefined
        }
      );

      console.log('Generated Report:', report);
      setGeneratedReport(report);
      setStep('complete');
      onComplete?.(report);
    } catch (err) {
      console.error('Report Generation Error:', err);
      setError(err instanceof Error ? err.message : 'Failed to generate report');
      setStep('select');
    } finally {
      setLoading(false);
    }
  };

  if (step === 'complete' && generatedReport) {
    return (
      <div className="p-6 bg-green-50 rounded-lg">
        <h3 className="text-lg font-semibold text-green-800 mb-2">Report Generated Successfully!</h3>
        <p className="text-green-700">Report ID: {generatedReport.report_id}</p>
        <p className="text-green-700">Type: {generatedReport.report_type}</p>
        <button 
          onClick={() => window.location.href = `/reports/${generatedReport.report_id}`}
          className="mt-4 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
        >
          View Report
        </button>
      </div>
    );
  }

  if (!userId) {
    return (
      <div className="p-4 bg-yellow-50 text-yellow-700 rounded-lg">
        Please log in to generate reports
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {error && (
        <div className="p-4 bg-red-50 text-red-700 rounded-lg">{error}</div>
      )}

      {step === 'select' && (
        <>
          <h2 className="text-2xl font-bold">Generate Medical Report</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              onClick={() => setReportType('symptom')}
              className={`p-4 border rounded-lg hover:border-blue-500 ${
                reportType === 'symptom' ? 'border-blue-500 bg-blue-50' : ''
              }`}
            >
              <h3 className="font-semibold">Symptom-Based Report</h3>
              <p className="text-sm text-gray-600 mt-1">Analyze specific symptoms and conditions</p>
            </button>

            <button
              onClick={() => setReportType('time')}
              className={`p-4 border rounded-lg hover:border-blue-500 ${
                reportType === 'time' ? 'border-blue-500 bg-blue-50' : ''
              }`}
            >
              <h3 className="font-semibold">Time Period Report</h3>
              <p className="text-sm text-gray-600 mt-1">30-day or annual health summary</p>
            </button>

            <button
              onClick={() => setReportType('specialist')}
              className={`p-4 border rounded-lg hover:border-blue-500 ${
                reportType === 'specialist' ? 'border-blue-500 bg-blue-50' : ''
              }`}
            >
              <h3 className="font-semibold">Specialist Report</h3>
              <p className="text-sm text-gray-600 mt-1">Detailed report for specific specialty</p>
            </button>
          </div>

          {reportType === 'symptom' && (
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Primary Symptom or Concern
                </label>
                <input
                  type="text"
                  placeholder="Describe your primary symptom or concern"
                  value={symptomFocus}
                  onChange={(e) => setSymptomFocus(e.target.value)}
                  className="w-full p-3 border rounded-lg"
                />
              </div>

              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  Select Assessments to Include (Optional)
                </h3>
                <p className="text-sm text-gray-600 mb-4">
                  Choose which of your previous health assessments to include in this symptom timeline report.
                </p>
                
                <AssessmentSelector
                  availableQuickScans={availableQuickScans}
                  availableDeepDives={availableDeepDives}
                  selectedQuickScans={selectedQuickScans}
                  selectedDeepDives={selectedDeepDives}
                  availableFlashAssessments={availableFlashAssessments}
                  availableGeneralAssessments={availableGeneralAssessments}
                  availableGeneralDeepDives={availableGeneralDeepDives}
                  selectedFlashAssessments={selectedFlashAssessments}
                  selectedGeneralAssessments={selectedGeneralAssessments}
                  selectedGeneralDeepDives={selectedGeneralDeepDives}
                  onToggle={toggleScan}
                  onToggleSection={toggleSection}
                  expandedSections={expandedSections}
                  loading={loadingData}
                />
              </div>

              <button
                onClick={handleGenerateSymptomReport}
                disabled={!symptomFocus || loading}
                className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    Generating Report...
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-5 h-5" />
                    Generate Symptom Timeline Report
                  </>
                )}
              </button>
            </div>
          )}

          {reportType === 'time' && (
            <div className="flex gap-4">
              <button
                onClick={() => handleGenerateTimeReport('30-day')}
                disabled={loading}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                Generate 30-Day Report
              </button>
              <button
                onClick={() => handleGenerateTimeReport('annual')}
                disabled={loading}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                Generate Annual Report
              </button>
            </div>
          )}

          {reportType === 'specialist' && (
            <div className="space-y-4">
              <p className="text-gray-600">
                Select the health analyses you want to include in the specialist report.
              </p>
              
              <AssessmentSelector
                availableQuickScans={availableQuickScans}
                availableDeepDives={availableDeepDives}
                selectedQuickScans={selectedQuickScans}
                selectedDeepDives={selectedDeepDives}
                availableFlashAssessments={availableFlashAssessments}
                availableGeneralAssessments={availableGeneralAssessments}
                availableGeneralDeepDives={availableGeneralDeepDives}
                selectedFlashAssessments={selectedFlashAssessments}
                selectedGeneralAssessments={selectedGeneralAssessments}
                selectedGeneralDeepDives={selectedGeneralDeepDives}
                onToggle={toggleScan}
                onToggleSection={toggleSection}
                expandedSections={expandedSections}
                loading={loadingData}
              />
              
              {
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"
                >
                  <button
                    onClick={() => toggleSection('quickScans')}
                    className="w-full p-4 flex items-center justify-between hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex items-center gap-3">
                      <Activity className="w-5 h-5 text-blue-600" />
                      <h3 className="font-semibold text-gray-900">Select Quick Scans</h3>
                      <span className="text-sm text-gray-500">({selectedQuickScans.length} selected)</span>
                    </div>
                    {expandedSections.quickScans ? (
                      <ChevronUp className="w-5 h-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="w-5 h-5 text-gray-500" />
                    )}
                  </button>
                  
                  <AnimatePresence>
                    {expandedSections.quickScans && (
                      <motion.div
                        initial={{ height: 0 }}
                        animate={{ height: 'auto' }}
                        exit={{ height: 0 }}
                        transition={{ duration: 0.2 }}
                        className="border-t border-gray-100"
                      >
                        <div className="p-4 space-y-2 max-h-64 overflow-y-auto">
                          {availableQuickScans.map(scan => {
                            const isSelected = selectedQuickScans.includes(scan.id);
                            const urgencyColor = {
                              'low': 'bg-green-100 text-green-800',
                              'medium': 'bg-yellow-100 text-yellow-800',
                              'high': 'bg-red-100 text-red-800'
                            }[scan.urgency_level] || 'bg-gray-100 text-gray-800';
                            
                            return (
                              <label
                                key={scan.id}
                                className={`
                                  flex items-start gap-3 p-3 rounded-lg cursor-pointer transition-all
                                  ${isSelected ? 'bg-blue-50 border-2 border-blue-300' : 'hover:bg-gray-50 border-2 border-transparent'}
                                `}
                              >
                                <input
                                  type="checkbox"
                                  checked={isSelected}
                                  onChange={() => toggleScan(scan.id, 'quick')}
                                  className="mt-1 w-4 h-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                />
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-1">
                                    <Calendar className="w-4 h-4 text-gray-500" />
                                    <span className="text-sm text-gray-600">
                                      {new Date(scan.created_at).toLocaleDateString()}
                                    </span>
                                    <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${urgencyColor}`}>
                                      {scan.urgency_level}
                                    </span>
                                  </div>
                                  <p className="font-medium text-gray-900">{scan.body_part}</p>
                                  {scan.summary && (
                                    <p className="text-sm text-gray-600 mt-1">{scan.summary}</p>
                                  )}
                                </div>
                              </label>
                            );
                          })}
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              )}
              
              {/* Deep Dive Selection */}
              {availableDeepDives.length > 0 && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden"
                >
                  <button
                    onClick={() => toggleSection('deepDives')}
                    className="w-full p-4 flex items-center justify-between hover:bg-gray-50 transition-colors"
                  >
                    <div className="flex items-center gap-3">
                      <FileText className="w-5 h-5 text-purple-600" />
                      <h3 className="font-semibold text-gray-900">Select Deep Dives</h3>
                      <span className="text-sm text-gray-500">({selectedDeepDives.length} selected)</span>
                    </div>
                    {expandedSections.deepDives ? (
                      <ChevronUp className="w-5 h-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="w-5 h-5 text-gray-500" />
                    )}
                  </button>
                  
                  <AnimatePresence>
                    {expandedSections.deepDives && (
                      <motion.div
                        initial={{ height: 0 }}
                        animate={{ height: 'auto' }}
                        exit={{ height: 0 }}
                        transition={{ duration: 0.2 }}
                        className="border-t border-gray-100"
                      >
                        <div className="p-4 space-y-2 max-h-64 overflow-y-auto">
                          {availableDeepDives.map(dive => {
                            const isSelected = selectedDeepDives.includes(dive.id);
                            
                            return (
                              <label
                                key={dive.id}
                                className={`
                                  flex items-start gap-3 p-3 rounded-lg cursor-pointer transition-all
                                  ${isSelected ? 'bg-purple-50 border-2 border-purple-300' : 'hover:bg-gray-50 border-2 border-transparent'}
                                `}
                              >
                                <input
                                  type="checkbox"
                                  checked={isSelected}
                                  onChange={() => toggleScan(dive.id, 'deep')}
                                  className="mt-1 w-4 h-4 text-purple-600 rounded border-gray-300 focus:ring-purple-500"
                                />
                                <div className="flex-1">
                                  <div className="flex items-center gap-2 mb-1">
                                    <Calendar className="w-4 h-4 text-gray-500" />
                                    <span className="text-sm text-gray-600">
                                      {new Date(dive.created_at).toLocaleDateString()}
                                    </span>
                                    <span className="px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                      completed
                                    </span>
                                  </div>
                                  <p className="font-medium text-gray-900">{dive.body_part}</p>
                                  {dive.final_summary && (
                                    <p className="text-sm text-gray-600 mt-1">{dive.final_summary}</p>
                                  )}
                                </div>
                              </label>
                            );
                          })}
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              )}
              
              {loadingData && (
                <div className="text-center py-4">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                  <p className="text-sm text-gray-600 mt-2">Loading your health data...</p>
                </div>
              )}
              
              {!loadingData && availableQuickScans.length === 0 && availableDeepDives.length === 0 && (
                <div className="text-center py-8 bg-gray-50 rounded-lg">
                  <p className="text-gray-600">No completed analyses found.</p>
                  <p className="text-sm text-gray-500 mt-1">Complete some Quick Scans or Deep Dives first.</p>
                </div>
              )}
              
              <button
                onClick={() => setStep('triage')}
                disabled={selectedQuickScans.length === 0 && selectedDeepDives.length === 0}
                className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                <CheckCircle className="w-5 h-5" />
                Continue to Specialist Selection
              </button>
            </div>
          )}
        </>
      )}

      {step === 'triage' && (
        <SpecialtyTriage
          userId={userId}
          quickScans={availableQuickScans.filter(scan => selectedQuickScans.includes(scan.id))}
          deepDives={availableDeepDives.filter(dive => selectedDeepDives.includes(dive.id))}
          onSpecialtySelected={(specialty, triage, selectedIds) => {
            console.log('=== SPECIALTY SELECTED ===');
            console.log('Specialty:', specialty);
            console.log('Triage Result:', triage);
            console.log('Selected IDs:', selectedIds);
            
            setSelectedSpecialty(specialty);
            setTriageResult(triage);
            setSelectedQuickScans(selectedIds.quick_scan_ids);
            setSelectedDeepDives(selectedIds.deep_dive_ids);
            
            // Pass specialty directly to avoid state race condition
            handleGenerateSpecialistReport(specialty);
          }}
        />
      )}

      {step === 'analyzing' && (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-lg">Analyzing your health data...</p>
          <p className="text-sm text-gray-600">Determining the best report type for your needs</p>
        </div>
      )}

      {step === 'generating' && analysisResult && (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-lg">Generating {analysisResult.recommended_type} report...</p>
          <p className="text-sm text-gray-600">{analysisResult.reasoning}</p>
          <p className="text-sm text-gray-600 mt-2">Confidence: {Math.round(analysisResult.confidence * 100)}%</p>
        </div>
      )}
    </div>
  );
}