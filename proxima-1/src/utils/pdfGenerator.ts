import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ReportData {
  report_id: string;
  report_type: string;
  generated_at: string;
  confidence_score?: number;
  model_used?: string;
  report_data: any;
}

export interface ExportOptions {
  includeMetadata?: boolean;
  includeSummaryOnly?: boolean;
  fileName?: string;
}

export const generateReportPDF = async (
  report: ReportData,
  options: ExportOptions = {}
): Promise<void> => {
  const {
    includeMetadata = true,
    includeSummaryOnly = false,
    fileName = `medical-report-${report.report_id || Date.now()}.pdf`
  } = options;

  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addText = (text: string, fontSize: number = 11, isBold: boolean = false) => {
    pdf.setFontSize(fontSize);
    pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
    
    const lines = pdf.splitTextToSize(text, contentWidth);
    const lineHeight = fontSize * 0.3528; // Convert pt to mm
    
    // Check if we need a new page
    if (yPosition + (lines.length * lineHeight) > pageHeight - margin) {
      pdf.addPage();
      yPosition = margin;
    }
    
    pdf.text(lines, margin, yPosition);
    yPosition += lines.length * lineHeight + 3;
  };

  const addSection = (title: string, content: any) => {
    // Add section title
    addText(title, 14, true);
    yPosition += 2;
    
    if (typeof content === 'string') {
      addText(content);
    } else if (Array.isArray(content)) {
      content.forEach(item => {
        if (typeof item === 'object') {
          addText(JSON.stringify(item, null, 2), 9);
        } else {
          addText(`• ${item}`);
        }
      });
    } else if (typeof content === 'object' && content !== null) {
      Object.entries(content).forEach(([key, value]) => {
        const subTitle = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        addText(`${subTitle}:`, 12, true);
        
        if (Array.isArray(value)) {
          value.forEach(item => {
            if (typeof item === 'object') {
              addText(JSON.stringify(item, null, 2), 9);
            } else {
              addText(`• ${item}`, 10);
            }
          });
        } else if (typeof value === 'object') {
          addText(JSON.stringify(value, null, 2), 9);
        } else {
          addText(String(value), 10);
        }
        yPosition += 2;
      });
    }
    
    yPosition += 5;
  };

  try {
    // Header
    pdf.setFillColor(147, 51, 234); // Purple-600
    pdf.rect(0, 0, pageWidth, 25, 'F');
    
    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Medical Report', margin, 18);
    
    yPosition = 35;
    pdf.setTextColor(0, 0, 0);

    // Report metadata
    const reportDate = new Date(report.generated_at);
    addText(`Report Type: ${report.report_type?.replace('_', ' ').toUpperCase() || 'Medical Report'}`, 10);
    addText(`Generated: ${reportDate.toLocaleDateString()} at ${reportDate.toLocaleTimeString()}`, 10);
    
    if (report.report_id) {
      addText(`Report ID: ${report.report_id}`, 10);
    }
    
    if (includeMetadata) {
      if (report.confidence_score) {
        addText(`Confidence Score: ${report.confidence_score}%`, 10);
      }
      if (report.model_used) {
        addText(`Generated by: ${report.model_used}`, 10);
      }
    }
    
    yPosition += 10;

    // Handle different report types
    if (report.report_type === 'urgent_triage') {
      // Special handling for urgent triage reports
      pdf.setFillColor(239, 68, 68); // Red-500
      pdf.rect(margin - 5, yPosition - 5, contentWidth + 10, 15, 'F');
      pdf.setTextColor(255, 255, 255);
      addText('⚠️ URGENT MEDICAL SUMMARY ⚠️', 16, true);
      pdf.setTextColor(0, 0, 0);
      yPosition += 5;

      if (report.report_data?.triage_summary) {
        addText('IMMEDIATE ACTION REQUIRED:', 14, true);
        addText(report.report_data.triage_summary.recommended_action || 'Seek immediate medical attention', 12);
        yPosition += 5;

        if (report.report_data.triage_summary.vital_symptoms) {
          addText('CRITICAL SYMPTOMS:', 12, true);
          report.report_data.triage_summary.vital_symptoms.forEach((symptom: any) => {
            addText(`• ${symptom.symptom} (${symptom.severity}) - ${symptom.duration}`, 10);
            if (symptom.red_flags && symptom.red_flags.length > 0) {
              addText(`  ⚠️ Red Flags: ${symptom.red_flags.join(', ')}`, 9);
            }
          });
          yPosition += 3;
        }

        if (report.report_data.triage_summary.what_to_tell_doctor) {
          addText('TELL THE DOCTOR:', 12, true);
          report.report_data.triage_summary.what_to_tell_doctor.forEach((item: string) => {
            addText(`• ${item}`, 10);
          });
        }
      }
    } else {
      // Standard report processing
      if (report.report_data?.executive_summary) {
        addSection('EXECUTIVE SUMMARY', report.report_data.executive_summary);
      }

      // If summary only, stop here
      if (!includeSummaryOnly && report.report_data) {
        // Add other sections
        Object.entries(report.report_data).forEach(([sectionKey, sectionData]) => {
          if (sectionKey === 'executive_summary') return; // Already added
          
          const sectionTitle = sectionKey.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
          addSection(sectionTitle, sectionData);
        });
      }
    }

    // Footer
    const pageCount = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text(
        `Page ${i} of ${pageCount}`,
        pageWidth - margin,
        pageHeight - 10,
        { align: 'right' }
      );
      pdf.text(
        'Generated by Proxima-1 Health Platform',
        margin,
        pageHeight - 10
      );
      
      // Add disclaimer
      pdf.text(
        'This report is for informational purposes only and should not replace professional medical advice.',
        margin,
        pageHeight - 5
      );
    }

    // Save the PDF
    pdf.save(fileName);

  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF report');
  }
};

// Alternative: Generate PDF from HTML element
export const generatePDFFromElement = async (
  elementId: string,
  fileName: string = 'medical-report.pdf'
): Promise<void> => {
  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error(`Element with ID '${elementId}' not found`);
    }

    // Create canvas from HTML element
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const imgWidth = pageWidth;
    const imgHeight = (canvas.height * pageWidth) / canvas.width;

    let heightLeft = imgHeight;
    let position = 0;

    // Add first page
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    // Add additional pages if needed
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save(fileName);
  } catch (error) {
    console.error('Error generating PDF from element:', error);
    throw new Error('Failed to generate PDF from HTML element');
  }
};

// Share report as text
export const shareReportText = async (report: ReportData): Promise<void> => {
  const summary = report.report_data?.executive_summary?.one_page_summary || 'Medical report summary not available';
  const shareData = {
    title: 'Medical Report',
    text: `Medical Report Summary:\n\n${summary}\n\nGenerated: ${new Date(report.generated_at).toLocaleDateString()}`,
  };

  if (navigator.share) {
    try {
      await navigator.share(shareData);
    } catch (error) {
      console.log('Error sharing report:', error);
      // Fallback to clipboard
      await navigator.clipboard.writeText(shareData.text);
      alert('Report summary copied to clipboard');
    }
  } else {
    // Fallback: copy to clipboard
    await navigator.clipboard.writeText(shareData.text);
    alert('Report summary copied to clipboard');
  }
};