import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { format, addDays } from 'date-fns';

// Types for Medical Report PDF
export interface MedicalReportData {
  // Required fields
  scan_id?: string;
  session_id?: string;
  user_id: string;
  assessment_date: Date;
  chief_complaint: {
    description: string;
    body_part: string;
    duration: string;
    severity: number;
    pattern?: string;
  };
  urgency_level: 'critical' | 'high' | 'moderate' | 'low';
  ai_analysis: {
    primary_condition: string;
    confidence: number;
    differentials: Array<{
      condition: string;
      probability: number;
    }>;
  };
  
  // Optional fields
  symptom_timeline?: Array<{
    date: string | Date;
    severity: number;
  }>;
  red_flags?: Array<{
    symptom: string;
    present: boolean;
  }>;
  treatments_tried?: Array<{
    treatment: string;
    result: string;
  }>;
  associated_symptoms?: Array<{
    symptom: string;
    onset_date: string;
    severity?: string;
    present: boolean;
  }>;
  triggers_patterns?: {
    time?: string;
    activity?: string;
    position?: string;
    weather?: string;
  };
  medical_history?: {
    family?: string;
    previous?: string;
    medications?: string;
    allergies?: string;
  };
  photo_documentation?: Array<{
    photo_id: string;
    date: string;
    finding?: string;
    thumbnail?: string;
  }>;
  tracking_data?: any;
  data_sources?: {
    quick_scans?: string[];
    deep_dives?: string[];
    photo_sessions?: string[];
  };
}

// Color scheme for medical PDFs
const MEDICAL_COLORS = {
  critical: '#991B1B',
  high: '#DC2626',
  moderate: '#CA8A04',
  low: '#16A34A',
  primary: '#9333EA',
  text: '#1E293B',
  muted: '#64748B',
  surface: '#F8FAFC',
  border: '#E2E8F0'
};

export class MedicalPdfGenerator {
  private pdf: jsPDF;
  private currentY: number;
  private pageNumber: number;
  private readonly pageWidth: number;
  private readonly pageHeight: number;
  private readonly margins = { top: 20, right: 20, bottom: 30, left: 20 };
  private readonly contentWidth: number;
  private verificationHash: string;
  private expiryDate: Date;

  constructor() {
    this.pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    
    this.pageWidth = this.pdf.internal.pageSize.getWidth();
    this.pageHeight = this.pdf.internal.pageSize.getHeight();
    this.contentWidth = this.pageWidth - this.margins.left - this.margins.right;
    this.currentY = this.margins.top;
    this.pageNumber = 1;
    this.verificationHash = '';
    this.expiryDate = addDays(new Date(), 7);
  }

  // Generate verification hash
  private generateVerificationHash(data: any): string {
    // Simple hash generation (in production, use crypto)
    const str = JSON.stringify(data) + new Date().toISOString();
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString(16).substring(0, 10);
  }

  // Add page header
  private addPageHeader(title: string, showValidity: boolean = true): void {
    // Header background
    this.pdf.setFillColor(248, 250, 252); // Light background
    this.pdf.rect(0, 0, this.pageWidth, 25, 'F');
    
    // Title
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.setFontSize(16);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.text(title, this.margins.left, 15);
    
    // Validity badge if on page 1
    if (showValidity && this.pageNumber === 1) {
      this.pdf.setFontSize(10);
      this.pdf.setTextColor(100, 116, 139);
      this.pdf.text(`Valid for 7 days`, this.pageWidth - this.margins.right, 15, { align: 'right' });
    }
    
    // Page number for subsequent pages
    if (this.pageNumber > 1) {
      this.pdf.setFontSize(10);
      this.pdf.setTextColor(100, 116, 139);
      this.pdf.text(`Page ${this.pageNumber}`, this.pageWidth - this.margins.right, 15, { align: 'right' });
    }
    
    // Separator line
    this.pdf.setDrawColor(226, 232, 240);
    this.pdf.setLineWidth(0.5);
    this.pdf.line(0, 25, this.pageWidth, 25);
    
    this.currentY = 35;
  }

  // Add page footer
  private addPageFooter(): void {
    const footerY = this.pageHeight - 15;
    
    // Separator line
    this.pdf.setDrawColor(226, 232, 240);
    this.pdf.setLineWidth(0.5);
    this.pdf.line(this.margins.left, footerY - 8, this.pageWidth - this.margins.right, footerY - 8);
    
    // Footer text
    this.pdf.setFontSize(8);
    this.pdf.setTextColor(100, 116, 139);
    
    // Left: Seimeo branding
    this.pdf.text('Generated by Seimeo AI • Not a diagnosis', this.margins.left, footerY - 3);
    
    // Right: Expiry and verification
    this.pdf.text(
      `Document expires ${format(this.expiryDate, 'MMM d, yyyy')}`,
      this.pageWidth - this.margins.right,
      footerY - 3,
      { align: 'right' }
    );
    
    // Verification hash
    this.pdf.text(
      `Verification: sha256:${this.verificationHash}`,
      this.pageWidth / 2,
      footerY + 2,
      { align: 'center' }
    );
  }

  // Add urgency bar
  private addUrgencyBar(urgency: string): void {
    const configs: Record<string, any> = {
      critical: { fill: 10, text: 'SEEK IMMEDIATE CARE', color: MEDICAL_COLORS.critical },
      high: { fill: 8, text: 'Schedule within 24-48 hours', color: MEDICAL_COLORS.high },
      moderate: { fill: 6, text: 'Schedule within 48-72 hours', color: MEDICAL_COLORS.moderate },
      low: { fill: 3, text: 'Routine follow-up', color: MEDICAL_COLORS.low }
    };
    
    const config = configs[urgency] || configs.moderate;
    
    // Section title
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text('URGENCY', this.margins.left, this.currentY);
    
    this.currentY += 7;
    
    // Background bar
    this.pdf.setFillColor(226, 232, 240);
    this.pdf.roundedRect(this.margins.left, this.currentY - 5, this.contentWidth, 10, 2, 2, 'F');
    
    // Filled portion
    const fillWidth = (config.fill / 10) * this.contentWidth;
    const rgb = this.hexToRgb(config.color);
    this.pdf.setFillColor(rgb.r, rgb.g, rgb.b);
    this.pdf.roundedRect(this.margins.left, this.currentY - 5, fillWidth, 10, 2, 2, 'F');
    
    // Progress dots
    for (let i = 1; i <= 10; i++) {
      const x = this.margins.left + ((i - 0.5) * this.contentWidth / 10);
      const filled = i <= config.fill;
      
      if (filled) {
        this.pdf.setFillColor(255, 255, 255);
      } else {
        this.pdf.setFillColor(200, 200, 200);
      }
      this.pdf.circle(x, this.currentY, 1, 'F');
    }
    
    // Text label
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.setFontSize(11);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.text(config.text, this.margins.left + 5, this.currentY + 8);
    
    this.currentY += 18;
  }

  // Add chief complaint box
  private addChiefComplaint(data: MedicalReportData): void {
    // Section header
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text('CHIEF COMPLAINT', this.margins.left, this.currentY);
    
    // Assessment date
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'normal');
    this.pdf.setTextColor(100, 116, 139);
    this.pdf.text(
      `Assessed: ${format(new Date(data.assessment_date), 'MMM d, yyyy')}`,
      this.pageWidth - this.margins.right,
      this.currentY,
      { align: 'right' }
    );
    
    this.currentY += 7;
    
    // Complaint box
    this.pdf.setDrawColor(226, 232, 240);
    this.pdf.setLineWidth(0.5);
    this.pdf.roundedRect(this.margins.left, this.currentY - 5, this.contentWidth, 20, 2, 2, 'D');
    
    // Complaint text
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.setFontSize(12);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.text(data.chief_complaint.description, this.margins.left + 5, this.currentY + 2);
    
    // Details
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'normal');
    const details = `Duration: ${data.chief_complaint.duration} | Severity: ${data.chief_complaint.severity}/10`;
    const pattern = data.chief_complaint.pattern ? ` | Pattern: ${data.chief_complaint.pattern}` : '';
    this.pdf.text(details + pattern, this.margins.left + 5, this.currentY + 9);
    
    this.currentY += 22;
  }

  // Add symptom progression chart
  private addSymptomChart(timeline?: Array<{date: string | Date; severity: number}>): void {
    if (!timeline || timeline.length === 0) return;
    
    // Section title
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text('SYMPTOM PROGRESSION', this.margins.left, this.currentY);
    this.currentY += 7;
    
    // Chart area
    const chartX = this.margins.left;
    const chartY = this.currentY;
    const chartWidth = this.contentWidth;
    const chartHeight = 40;
    
    // Chart background
    this.pdf.setFillColor(248, 250, 252);
    this.pdf.rect(chartX, chartY, chartWidth, chartHeight, 'F');
    
    // Grid lines
    this.pdf.setDrawColor(226, 232, 240);
    this.pdf.setLineWidth(0.1);
    
    // Horizontal grid lines (severity levels)
    for (let i = 0; i <= 10; i += 2) {
      const y = chartY + chartHeight - (i / 10 * chartHeight);
      this.pdf.line(chartX, y, chartX + chartWidth, y);
      
      // Y-axis labels
      this.pdf.setFontSize(8);
      this.pdf.setTextColor(100, 116, 139);
      this.pdf.text(i.toString(), chartX - 5, y + 1);
    }
    
    // Plot line
    if (timeline.length > 0) {
      this.pdf.setDrawColor(147, 51, 234); // Purple
      this.pdf.setLineWidth(1);
      
      let lastX = 0, lastY = 0;
      timeline.forEach((point, index) => {
        const x = chartX + (index / (timeline.length - 1)) * chartWidth;
        const severity = Math.min(10, Math.max(0, point.severity));
        const y = chartY + chartHeight - (severity / 10 * chartHeight);
        
        // Draw line
        if (index > 0) {
          this.pdf.line(lastX, lastY, x, y);
        }
        
        // Draw point
        this.pdf.setFillColor(147, 51, 234);
        this.pdf.circle(x, y, 1.5, 'F');
        
        // Date label for first, middle, and last points
        if (index === 0 || index === timeline.length - 1 || index === Math.floor(timeline.length / 2)) {
          this.pdf.setFontSize(8);
          this.pdf.setTextColor(100, 116, 139);
          const dateStr = format(new Date(point.date), 'MMM d');
          this.pdf.text(dateStr, x, chartY + chartHeight + 5, { align: 'center' });
        }
        
        lastX = x;
        lastY = y;
      });
      
      // Trend indicator
      const firstSeverity = timeline[0].severity;
      const lastSeverity = timeline[timeline.length - 1].severity;
      let trend = 'Stable';
      let trendColor = MEDICAL_COLORS.moderate;
      
      if (lastSeverity > firstSeverity + 1) {
        trend = '← Getting worse';
        trendColor = MEDICAL_COLORS.high;
      } else if (lastSeverity < firstSeverity - 1) {
        trend = '← Improving';
        trendColor = MEDICAL_COLORS.low;
      }
      
      const rgb = this.hexToRgb(trendColor);
      this.pdf.setTextColor(rgb.r, rgb.g, rgb.b);
      this.pdf.setFontSize(9);
      this.pdf.setFont('helvetica', 'bold');
      this.pdf.text(trend, chartX + chartWidth - 20, chartY + 10);
    }
    
    this.currentY = chartY + chartHeight + 10;
  }

  // Add red flags checklist
  private addRedFlags(redFlags?: Array<{symptom: string; present: boolean}>): void {
    if (!redFlags || redFlags.length === 0) return;
    
    // Section title with warning icon
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text('⚠️ RED FLAGS TO RULE OUT', this.margins.left, this.currentY);
    this.currentY += 7;
    
    // Red flags box
    this.pdf.setDrawColor(226, 232, 240);
    this.pdf.setLineWidth(0.5);
    const boxHeight = redFlags.length * 6 + 5;
    this.pdf.roundedRect(this.margins.left, this.currentY - 5, this.contentWidth, boxHeight, 2, 2, 'D');
    
    // List red flags
    redFlags.forEach((flag, index) => {
      const y = this.currentY + (index * 6);
      
      // Checkbox
      this.pdf.setDrawColor(100, 116, 139);
      this.pdf.setLineWidth(0.5);
      const checkX = this.margins.left + 5;
      const checkY = y - 2;
      
      if (flag.present) {
        // Filled checkbox
        this.pdf.setFillColor(220, 38, 38); // Red
        this.pdf.rect(checkX, checkY, 3, 3, 'FD');
        // Checkmark
        this.pdf.setDrawColor(255, 255, 255);
        this.pdf.setLineWidth(0.5);
        this.pdf.line(checkX + 0.5, checkY + 1.5, checkX + 1.2, checkY + 2.2);
        this.pdf.line(checkX + 1.2, checkY + 2.2, checkX + 2.5, checkY + 0.5);
      } else {
        // Empty checkbox
        this.pdf.rect(checkX, checkY, 3, 3, 'D');
      }
      
      // Flag text
      this.pdf.setTextColor(30, 41, 59);
      this.pdf.setFontSize(10);
      this.pdf.setFont('helvetica', 'normal');
      this.pdf.text(flag.symptom, checkX + 6, y);
      
      // Status
      const status = flag.present ? 'PRESENT' : 'NOT PRESENT';
      const statusColor = flag.present ? MEDICAL_COLORS.high : MEDICAL_COLORS.low;
      const rgb = this.hexToRgb(statusColor);
      this.pdf.setTextColor(rgb.r, rgb.g, rgb.b);
      this.pdf.setFontSize(9);
      this.pdf.setFont('helvetica', 'bold');
      this.pdf.text(status, this.pageWidth - this.margins.right - 5, y, { align: 'right' });
    });
    
    this.currentY += boxHeight + 5;
  }

  // Add treatments tried section
  private addTreatmentsTried(treatments?: Array<{treatment: string; result: string}>): void {
    if (!treatments || treatments.length === 0) return;
    
    // Section title
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text('WHAT PATIENT HAS TRIED', this.margins.left, this.currentY);
    this.currentY += 5;
    
    // List treatments
    treatments.forEach(item => {
      this.pdf.setTextColor(30, 41, 59);
      this.pdf.setFontSize(10);
      
      // Bullet point
      this.pdf.setFillColor(147, 51, 234);
      this.pdf.circle(this.margins.left + 2, this.currentY - 1, 1, 'F');
      
      // Treatment and result
      this.pdf.setFont('helvetica', 'normal');
      const text = `${item.treatment} - ${item.result}`;
      const lines = this.pdf.splitTextToSize(text, this.contentWidth - 10);
      lines.forEach((line: string, i: number) => {
        this.pdf.text(line, this.margins.left + 7, this.currentY + (i * 5));
      });
      
      this.currentY += lines.length * 5;
    });
    
    this.currentY += 5;
  }

  // Add AI differential diagnosis
  private addAIDifferential(analysis: MedicalReportData['ai_analysis']): void {
    // Section title
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text(`AI DIFFERENTIAL (Confidence: ${analysis.confidence}%)`, this.margins.left, this.currentY);
    this.currentY += 5;
    
    // List conditions
    analysis.differentials.forEach((item, index) => {
      this.pdf.setTextColor(30, 41, 59);
      this.pdf.setFontSize(10);
      this.pdf.setFont('helvetica', 'normal');
      
      const text = `${index + 1}. ${item.condition} (${item.probability}% match)`;
      this.pdf.text(text, this.margins.left + 5, this.currentY);
      this.currentY += 5;
    });
    
    this.currentY += 5;
  }

  // Page 2: Add associated symptoms
  private addAssociatedSymptoms(symptoms?: Array<{symptom: string; onset_date: string; severity?: string; present: boolean}>): void {
    if (!symptoms || symptoms.length === 0) return;
    
    // Section title
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text('ASSOCIATED SYMPTOMS', this.margins.left, this.currentY);
    this.currentY += 7;
    
    // Symptoms box
    this.pdf.setDrawColor(226, 232, 240);
    this.pdf.setLineWidth(0.5);
    const boxHeight = symptoms.length * 6 + 5;
    this.pdf.roundedRect(this.margins.left, this.currentY - 5, this.contentWidth, boxHeight, 2, 2, 'D');
    
    symptoms.forEach((symptom, index) => {
      const y = this.currentY + (index * 6);
      
      // Status icon
      const icon = symptom.present ? '✓' : '✗';
      const iconColor = symptom.present ? MEDICAL_COLORS.moderate : MEDICAL_COLORS.muted;
      const rgb = this.hexToRgb(iconColor);
      this.pdf.setTextColor(rgb.r, rgb.g, rgb.b);
      this.pdf.setFontSize(12);
      this.pdf.text(icon, this.margins.left + 5, y);
      
      // Symptom details
      this.pdf.setTextColor(30, 41, 59);
      this.pdf.setFontSize(10);
      this.pdf.setFont('helvetica', 'normal');
      let details = symptom.symptom;
      if (symptom.severity) details += ` (${symptom.severity})`;
      this.pdf.text(details, this.margins.left + 12, y);
      
      // Onset date
      this.pdf.setTextColor(100, 116, 139);
      this.pdf.setFontSize(9);
      this.pdf.text(`Started: ${symptom.onset_date}`, this.pageWidth - this.margins.right - 5, y, { align: 'right' });
    });
    
    this.currentY += boxHeight + 5;
  }

  // Add triggers and patterns
  private addTriggersPatterns(triggers?: MedicalReportData['triggers_patterns']): void {
    if (!triggers || Object.keys(triggers).length === 0) return;
    
    // Section title
    this.pdf.setFontSize(10);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.setTextColor(30, 41, 59);
    this.pdf.text('TRIGGERS & PATTERNS', this.margins.left, this.currentY);
    this.currentY += 7;
    
    // Patterns box
    this.pdf.setDrawColor(226, 232, 240);
    this.pdf.setLineWidth(0.5);
    const entries = Object.entries(triggers).filter(([_, value]) => value);
    const boxHeight = entries.length * 6 + 5;
    this.pdf.roundedRect(this.margins.left, this.currentY - 5, this.contentWidth, boxHeight, 2, 2, 'D');
    
    entries.forEach(([key, value], index) => {
      const y = this.currentY + (index * 6);
      
      // Key
      this.pdf.setTextColor(100, 116, 139);
      this.pdf.setFontSize(10);
      this.pdf.setFont('helvetica', 'bold');
      const label = key.charAt(0).toUpperCase() + key.slice(1) + ':';
      this.pdf.text(label, this.margins.left + 5, y);
      
      // Value
      this.pdf.setTextColor(30, 41, 59);
      this.pdf.setFont('helvetica', 'normal');
      this.pdf.text(value as string, this.margins.left + 30, y);
    });
    
    this.currentY += boxHeight + 5;
  }

  // Helper: Convert hex to RGB
  private hexToRgb(hex: string): {r: number; g: number; b: number} {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : {r: 0, g: 0, b: 0};
  }

  // Check if new page is needed
  private checkNewPage(requiredSpace: number = 30): void {
    if (this.currentY + requiredSpace > this.pageHeight - this.margins.bottom) {
      this.addPageFooter();
      this.pdf.addPage();
      this.pageNumber++;
      this.currentY = this.margins.top;
      this.addPageHeader('DETAILED SYMPTOM DOCUMENTATION', false);
    }
  }

  // Main generation method
  public async generateMedicalReport(data: MedicalReportData): Promise<Blob> {
    // Generate verification hash
    this.verificationHash = this.generateVerificationHash(data);
    
    // Page 1: Executive Summary
    this.addPageHeader('PATIENT HEALTH ASSESSMENT');
    this.addUrgencyBar(data.urgency_level);
    this.addChiefComplaint(data);
    this.addSymptomChart(data.symptom_timeline);
    this.addRedFlags(data.red_flags);
    this.addTreatmentsTried(data.treatments_tried);
    this.addAIDifferential(data.ai_analysis);
    this.addPageFooter();
    
    // Page 2: Detailed Documentation
    if (data.associated_symptoms || data.triggers_patterns || data.medical_history) {
      this.pdf.addPage();
      this.pageNumber++;
      this.currentY = this.margins.top;
      this.addPageHeader('DETAILED SYMPTOM DOCUMENTATION', false);
      
      this.addAssociatedSymptoms(data.associated_symptoms);
      this.addTriggersPatterns(data.triggers_patterns);
      
      // Add medical history if present
      if (data.medical_history) {
        this.checkNewPage();
        
        this.pdf.setFontSize(10);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.setTextColor(30, 41, 59);
        this.pdf.text('RELEVANT HISTORY', this.margins.left, this.currentY);
        this.currentY += 5;
        
        Object.entries(data.medical_history).forEach(([key, value]) => {
          if (value) {
            this.pdf.setFontSize(10);
            this.pdf.setFont('helvetica', 'normal');
            
            // Bullet
            this.pdf.setFillColor(147, 51, 234);
            this.pdf.circle(this.margins.left + 2, this.currentY - 1, 1, 'F');
            
            // Text
            this.pdf.setTextColor(30, 41, 59);
            const label = key.charAt(0).toUpperCase() + key.slice(1) + ': ';
            this.pdf.text(label + value, this.margins.left + 7, this.currentY);
            this.currentY += 5;
          }
        });
        
        this.currentY += 5;
      }
      
      // Add data sources if present
      if (data.data_sources) {
        this.checkNewPage();
        
        this.pdf.setFontSize(10);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.setTextColor(30, 41, 59);
        this.pdf.text('DATA SOURCES', this.margins.left, this.currentY);
        this.currentY += 5;
        
        if (data.data_sources.quick_scans?.length) {
          this.pdf.setFontSize(10);
          this.pdf.setFont('helvetica', 'normal');
          this.pdf.text(`• Quick Scans: ${data.data_sources.quick_scans.join(', ')}`, this.margins.left + 5, this.currentY);
          this.currentY += 5;
        }
        
        if (data.data_sources.deep_dives?.length) {
          this.pdf.text(`• Deep Dives: ${data.data_sources.deep_dives.join(', ')}`, this.margins.left + 5, this.currentY);
          this.currentY += 5;
        }
        
        if (data.data_sources.photo_sessions?.length) {
          this.pdf.text(`• Photo Sessions: ${data.data_sources.photo_sessions.join(', ')}`, this.margins.left + 5, this.currentY);
          this.currentY += 5;
        }
      }
      
      this.addPageFooter();
    }
    
    // Return as blob
    return this.pdf.output('blob');
  }

  // Save PDF to file
  public save(filename: string): void {
    this.pdf.save(filename);
  }
}

// Export singleton instance
export const medicalPdfService = new MedicalPdfGenerator();